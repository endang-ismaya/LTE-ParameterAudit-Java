#!/bin/bash

# //////////////////////////////////////////////////////////////////////// #
# Application Name	: ei.byar_bb
# Version						: v.1.0.2
# Author 						: endang.ismaya@gmail.com
# Date 							: May 06, 2016
# Update						: Sept 08, 2016
# Location 					: San Francisco, USA
# Comment						:	Kget Extraction for SRT Tools requirement
# //////////////////////////////////////////////////////////////////////// #

# //////////////////////////////////////////////////////////////////////// #
# [REVISION-HISTORY]
# v.1.0.0
#  * May 06, 2016 Beta Version
# v.1.0.1
#	 * May 10, 2016
#	 * -> add egrep '=WcdmaHandover#OptionalFeatureLicense#featureState#|=DynamicScellSelection#OptionalFeatureLicense#featureState#|=SrvccToUtran#OptionalFeatureLicense#featureState'
#	 * -> add egrep 'qciProfileRef' CCL09639R_?*tranFreqRelationId >> "${REPLY}_qciProfileRef"
# v.1.0.2
#	 * -> add BaseBand 5216
# //////////////////////////////////////////////////////////////////////// #

##: -------------------------------------------------##
##: INITIALIZATION OF VARIABLES
##: -------------------------------------------------##
progname=${0##*/}
author="Endang.Ismaya(endang.ismaya@gmail.com)"
creationdate="May 06, 2016"
updatedate="Sept 08, 2016"
description="Kget Extraction for SRT Tools requirement"
comment="Don't panic! please report if You find a bug."
version=1.0.2
FOLCURRENT=`pwd` 
options=":f:a:cvh"

##: -------------------------------------------------##
##: FUNCTION DEFINITION
##: -------------------------------------------------##
## Usage Function to send the information how to use the tool
usage()
{        
printf '\n\e[1;35m%s: %s\e[0m\n\n' "Usage" "${progname} [-f sitelist]"
printf '\e[1;34m%s: %s\e[0m\n' "-f" "sitelist (Mandatory)"
printf '\e[1;34m%s: %s\e[0m\n' "-a" "additional foldername (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-c" "copy datainput to working folder instead of moving (optional)"
printf '\e[1;34m%s: %s\e[0m\n' "-h" "show this help message"
printf '\e[1;34m%s: %s\e[0m\n' "-v" "show this tool version"
printf '\e[1;34m%s %s\e[0m\n' "e.g." ""
printf '      \e[1;35m%s\e[0m\n\n' "$progname -f sitelist"
}

## Version Function
showversion()
{
## drawline2 "Version : ${version}"
printf '\e[1;33m%s version %s\e[0m\n\n' "$progname" "$version"
printf '\e[1;34mby %s, %s\e[0m\n' "$author" "${updatedate}"
printf '\e[1;34m%s\n%s\e[0m\n' "$description" "${comment}"
}

## error catch
error ()
{
	## echo "Error: $1"
	printf '\e[1;31m%s\e[0m\n\n' "Error: $1"
	usage
	exit $2
} >&2

## drawline function
drawline ()
{

dt=`date '+%m/%d/%Y %H:%M:%S'`
	
	len="${#1} + 26"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
	
	printf '| \e[1;32m%s : %s\e[0m |\n' "$1" "$dt"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "%s\n" "$line"
}

## drawline function
drawline2 ()
{
dt="->"
	len="${#1} + 4"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "      %s\n" "$line"
	
	printf '   -->| \e[1;33m%s\e[0m |\n' "$1"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "      %s\n" "$line"
}

## drawline function
drawline3 ()
{
dt="->"
	len="${#1} + 4"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "        %s\n" "$line"
	
	printf '     -->| \e[1;34m%s\e[0m |\n' "$1"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "        %s\n" "$line"
}

## drawline function
drawline4 ()
{
dt="->"
	len="${#1} + 4"
	
	declare line=""
	declare char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "          %s\n" "$line"
	
	printf '       -->| \e[1;35m%s\e[0m |\n' "$1"
	
	line=""
	char="-"
	for (( i=0; i<$len ; i++ )); do
		line="${line}${char}"
	done
	printf "          %s\n" "$line"
}

##: -------------------------------------------------##
##: RUN TIME CONFIGURATION AND OPTIONS
##: -------------------------------------------------##
##// checking if no argument (filename)
[[ $# -lt 1 ]] && { printf '\e[1;31m%s\e[0m\n\n' "Missing an argument." >&2; usage ; exit 1; }

while getopts $options opt; do
	case $opt in
		f)FILEOPT="${OPTARG}" ;;
		c)FILECOPY="YES" ;;
		a)FILEADD="${OPTARG}" ;;
		h)usage;exit 0;;
		v)showversion;exit 0;;
		:)error "Option -${OPTARG} is missing an argument" 2;;
		\?)error "Unknown option: -${OPTARG}" 3 ;;
 	esac
done   
shift $((OPTIND -1))

## variable declaration

## Folder & Files variable declaration
## current folder
## data file, provided by user
FILEDATA=${FILEOPT}
sitelistname=""
##----------------------------------------------------------

## processing sign
drawline "Start "
##-----------------

if [[ ! $FILEDATA ]]; then
	printf '!!! \e[1;31m%s\e[0m !!!\n' "need a filename to proceed" >&2
	usage
	drawline "Terminated "
	exit 1
else
	if [[ ! -e $FILEDATA ]]; then
	 	printf '!!! \e[1;31m%s\e[0m !!!\n' "File ${FILEDATA} is not exists" >&2
	 	drawline "Terminated "
	 	exit 1
	fi
fi

while read -r || [[ $REPLY ]]; do
		sitelistname="${sitelistname}_${REPLY}"
done < "$FILEDATA"

dt=`date '+%m%d%Y_%H%M%S'`
if [[ ! $FILEADD ]]; then
	fol="SRT_BBU_${USER}${sitelistname}_${dt}"
else
	fol="${FILEADD}_SRT_BBU_${USER}${sitelistname}_${dt}"
fi
datainput1="$FILEDATA"

## files variables
DIRECTORY="tmpmobatch"

mkdir "${fol}"
if [[ $FILECOPY ]]; then
	cp "${FILEDATA}" "${fol}/${FILEDATA}"
else
	mv "${FILEDATA}" "${fol}/${FILEDATA}"
fi
cd ${fol}

## processing sign
nohup /opt/ericsson/amos/moshell/mobatch -p 5 -t 120 ${FILEDATA} /home/ei400b/00_Tools/ltesrtbb/SRT_CHECK_CMD ${DIRECTORY}

## deleting tmpDirectory
rm -R ${DIRECTORY}

## Extracting Kget
## Create folder in each sitename
while read -r || [[ $REPLY ]]; do
	drawline2 "${REPLY}->Extracting Kget"
	java -cp /home/ei400b/00_Tools/ltesrtbb/byarbb.v6pro.jar Main "KGET_SRT_${REPLY}.log" 1

## check status	
STATUS="${?}"
if [[ ${STATUS} == 0 ]]; then
     exit 1
fi

drawline3 "${REPLY}::getting additional information"

## ## SiteDataId
drawline4 "${REPLY}::siteData"
## RBSType
egrep '#ManagedElement#productName#|Equipment=1,Cabinet=1#Cabinet#productData.productName#' ${REPLY}*Id > "${REPLY}_SiteData"
## DU Type
egrep 'Equipment=1,Subrack=1,Slot=1.*#productData.productName#|Equipment=1,FieldReplaceableUnit=1.*#productData.productName#' ${REPLY}*Id >> "${REPLY}_SiteData"
## SiteName
egrep '#ManagedElement#site#|networkManagedElementId#' ${REPLY}*Id >> "${REPLY}_SiteData"
## GPS
egrep '#Synchronization#syncReference\[1\]|Transport=1,Synchronization=1,TimeSyncIO=1.*RadioEquipmentClockReference=1' ${REPLY}*Id >> "${REPLY}_SiteData"
## OtDoaSupport
egrep 'LppaBasedOtdoaSupport#OptionalFeatureLicense#featureState#|SystemFunctions=1,Lm=1,FeatureState=CXC4011481#FeatureState#featureState#' ${REPLY}*Id >> "${REPLY}_SiteData"
## Carrier Aggregation
egrep '=CarrierAggregation#OptionalFeatureLicense#featureState#|SystemFunctions=1,Lm=1,FeatureState=CXC4011476#FeatureState#featureState#' ${REPLY}*Id >> "${REPLY}_SiteData"
## eNBId
egrep '#ENodeBFunction#eNBId' ${REPLY}*Id >> "${REPLY}_SiteData"

## SW Version
egrep 'Executing:|Current SwVersion' ${REPLY}*SRT_CHECK_*.log  >> "${REPLY}_SiteData"
## Alarms
egrep 'Total.*Alarms' ${REPLY}*SRT_CHECK_*.log  >> "${REPLY}_SiteData"
## MME
egrep 'ENodeBFunction=1,TermPointToMme' ${REPLY}*SRT_CHECK_*.log  >> "${REPLY}_SiteData"
## XMU
egrep 'BXP.*XMU' ${REPLY}*SRT_CHECK_*.log  >> "${REPLY}_SiteData"

## IP Version
egrep "ERBS_NODE_MODEL|MSRBS_NODE_MODEL" ${REPLY}*SRT_CHECK_*.log | head -1  >> "${REPLY}_SiteData"

## PSHO
egrep '=WcdmaHandover#OptionalFeatureLicense#featureState#|SystemFunctions=1,Lm=1,FeatureState=CXC4011011#FeatureState#featureState#' ${REPLY}*Id >> "${REPLY}_SiteData"
## DynamicScell
egrep '=DynamicScellSelection#OptionalFeatureLicense#featureState|SystemFunctions=1,Lm=1,FeatureState=CXC4011559#FeatureState#featureState#' ${REPLY}*Id >> "${REPLY}_SiteData"
## SrvccToUtran
egrep '=SrvccToUtran#OptionalFeatureLicense#featureState|SystemFunctions=1,Lm=1,FeatureState=CXC4011247#FeatureState#featureState#' ${REPLY}*Id >> "${REPLY}_SiteData"

## qciProfileRef
drawline4 "${REPLY}::EUtranFreqRelatio::qciProfileRef"
egrep 'qciProfileRef' ${REPLY}_UtranFreqRelationId | nawk '{gsub(".qciProfileRef","");gsub("SubNetwork=.*ManagedElement=1,","");print}' | cut -d'|' -f1,2,4,5 > "${REPLY}_qciProfileRef"
egrep 'qciProfileRef' ${REPLY}_EUtranFreqRelationId | nawk '{gsub(".qciProfileRef","");gsub("SubNetwork=.*ManagedElement=1,","");print}' | cut -d'|' -f1,2,4,5 >> "${REPLY}_qciProfileRef"

## 	
## arfcnValueEUtranDl
drawline4 "${REPLY}::EUtranFrequency::arfcnValueEUtranDl"
egrep 'EUtranFrequency=' ${REPLY}_SRT_CHECK_*.log | egrep -iv 'arfcnValueEUtranDl' | nawk '{print $1" "$3}' > tmp1
egrep 'EUtranFrequency=' ${REPLY}_SRT_CHECK_*.log | egrep -iv 'sget' | egrep -i 'arfcnValueEUtranDl' | nawk '{print $1" "$3}' > tmp2
nawk 'NR==FNR{a[$1]=$2;next} {print $1, $2, a[$2]?a[$2]:"NA"}' tmp2 tmp1 > "${REPLY}_arfcnValueEUtranDl"

## ExternalEUtranCellFDDId::ExternalFreqBandwidth
drawline4 "${REPLY}::ExternalEUtranCellFDDId::ExternalFreqBandwidth"
egrep -i 'reservedBy' ${REPLY}*_ExternalEUtranCellFDDId | egrep -iv 'reservedBy\[0\]' | cut -d'#' -f5 | nawk '{gsub(".*EUtranFreqRelation=","");gsub(",EUtranCellRelation="," ");print $2" "$1}' > tmp3
egrep -i 'channel' ${REPLY}*_ExternalEUtranCellFDDId | egrep -iv 'ChannelBandwidth#0' | cut -d'#' -f2,5 | nawk '{gsub("#"," ");gsub(".*=","");print}' > tmp4
nawk 'NR==FNR{a[$1]=$2;next} {print $1, $2, a[$1]?a[$1]:"NA"}' tmp4 tmp3 > "${REPLY}_ExternalFreqBandwidth"

## Hicap Setting
drawline4 "${REPLY}::Hicap Setting FGA53 Rev.A"
egrep 'ulSrsEnable|cellRange|pdschTypeBGain|crsGain' "${REPLY}_EUtranCellFDDId" > "${REPLY}_HiCap"
egrep 'dlMaxRetxThreshold|ulMaxRetxThreshold|tPollRetransmitDl|tPollRetransmitUl' "${REPLY}_DataRadioBearerId" >> "${REPLY}_HiCap"
egrep 'dlMaxRetxThreshold|ulMaxRetxThreshold|tReorderingUl|tReorderingDl|tPollRetransmitDl|tPollRetransmitUl' "${REPLY}_SignalingRadioBearerId" >> "${REPLY}_HiCap"
egrep 'tReorderingUl|tReorderingDl' "${REPLY}_QciProfilePredefinedId" | egrep "=qci1|=qci5|=qci8|QciProfilePredefined=default" >> "${REPLY}_HiCap"
egrep 'OptionalFeatureLicense=Pfs#OptionalFeatureLicense#featureState' "${REPLY}_OptionalFeatureLicenseId" >> "${REPLY}_HiCap"
egrep 'SystemFunctions=1,Lm=1,FeatureState=CXC4011033#FeatureState#featureState#'  "${REPLY}_FeatureStateId" >> "${REPLY}_HiCap" 
egrep 'OptionalFeatureLicense=UlFss#OptionalFeatureLicense#featureState' "${REPLY}_OptionalFeatureLicenseId" >> "${REPLY}_HiCap"
egrep 'SystemFunctions=1,Lm=1,FeatureState=CXC4011074#FeatureState#featureState#' "${REPLY}_FeatureStateId" >> "${REPLY}_HiCap"
egrep 'OptionalFeatureLicense=DlFss#OptionalFeatureLicense#featureState' "${REPLY}_OptionalFeatureLicenseId" >> "${REPLY}_HiCap"
egrep 'SystemFunctions=1,Lm=1,FeatureState=CXC4011255#FeatureState#featureState#' "${REPLY}_FeatureStateId" >> "${REPLY}_HiCap"
egrep 'dlMaxHARQTx|ulMaxHARQTx' "${REPLY}_MACConfigurationId" >> "${REPLY}_HiCap"
egrep '#1437#|#556#|#306#|#1211#' "${REPLY}_SystemConstantsId" >> "${REPLY}_HiCap"

## E&UtranFreqRelation
drawline4 "${REPLY}::EUtranFreqRelation"
egrep -i 'UtranFreqRelationId' "${REPLY}_UtranFreqRelationId" | nawk '{gsub("ENodeBFunction=1,EUtranCellFDD=","");gsub(",UtranFreqRelation.*Id","");print}' > "${REPLY}_UtranFreqRelation"
egrep -i 'EUtranFreqRelationId' "${REPLY}_EUtranFreqRelationId" | nawk '{gsub("ENodeBFunction=1,EUtranCellFDD=","");gsub(",EUtranFreqRelation.*Id","");print}' > "${REPLY}_EUtranFreqRelation"

## EUtranCellRelation
drawline4 "${REPLY}::EUtranCellRelation"
egrep 'EUtranCellRelationId' "${REPLY}_EUtranCellRelationId" | cut -d'#' -f1,2 | nawk '{gsub("ENodeBFunction=1,EUtranCellFDD="," ");gsub(",EUtranFreqRelation="," ");gsub(",EUtranCellRelation="," ");gsub("#"," ");print $1" "$2" "$3" "$4" "$2"<->"$4}' > "${REPLY}_EUtranCellRelation"
egrep 'eUtranCellRelationId' "${REPLY}_EUtranCellRelationId" | cut -d'#' -f1,2 | nawk '{gsub("#.*ENodeBFunction=1,EUtranCellFDD=","# ");gsub(",EUtranFreqRelation="," ");gsub(",EUtranCellRelation="," ");gsub("#"," ");print $1" "$2" "$3" "$4" "$2"<->"$4}' > "${REPLY}_EUtranCellRelation"

## rfBranch
drawline4 "${REPLY}::rfBranch"
egrep '.*;.*RfPort=' ${REPLY}*SRT_CHECK_*.log | nawk '{gsub("\\[.\\] = ","");print}' > "${REPLY}_rfPortRef"
egrep 'RfBranch=.*;' ${REPLY}*SRT_CHECK_*.log | egrep -iv 'RfPort=' | nawk '{gsub("\\[.\\] = ","");print}' > "${REPLY}_dlAttenuation"

rm tmp1
rm tmp2
rm tmp3
rm tmp4
 
done < "${FILEDATA}"
#--------------------------------------

## zip folder
printf '\t\e[1;34m%s\e[0m\n' "- compressing file..."
cd ..
zip -qr ${fol}.zip ${fol}
rm -R ${fol}
#---------------------------------------------------

## processing sign
drawline "Finish "
##-----------------
                                 
exit 0
